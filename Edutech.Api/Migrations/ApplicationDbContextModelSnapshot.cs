// <auto-generated />
using System;
using Edutech.Api.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Edutech.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Edutech.Api.Infrastructure.Data.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Contents", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a42db8d-4a9e-4d8b-a472-b41239680ce1"),
                            ContentTypeId = new Guid("7cc0ccb8-0d6b-4d9a-a597-14c70b0b2de3"),
                            ModuleId = new Guid("1d1f4fca-d514-4931-98e7-e807d6601957"),
                            Title = "Introduction to Product Management",
                            Url = "https://www.youtube.com/watch?v=9Qn0v6wJwPc"
                        },
                        new
                        {
                            Id = new Guid("e5f803ea-1885-4efc-a3ff-da0cc8b327c0"),
                            ContentTypeId = new Guid("5b65ae10-b29c-41b7-8ba5-4e2be130da84"),
                            ModuleId = new Guid("1d1f4fca-d514-4931-98e7-e807d6601957"),
                            Title = "Career prospect for Product Managers",
                            Url = "https://www.productplan.com/glossary/product-management-framework/"
                        });
                });

            modelBuilder.Entity("Edutech.Api.Infrastructure.Data.ContentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7cc0ccb8-0d6b-4d9a-a597-14c70b0b2de3"),
                            Name = "Video"
                        },
                        new
                        {
                            Id = new Guid("5b65ae10-b29c-41b7-8ba5-4e2be130da84"),
                            Name = "Text"
                        },
                        new
                        {
                            Id = new Guid("6a6a3696-28d8-4654-b42f-7abb11f3a2a5"),
                            Name = "Quiz"
                        });
                });

            modelBuilder.Entity("Edutech.Api.Infrastructure.Data.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e03d27a-f78a-4717-a029-f4c5bf653b97"),
                            Description = "This course is designed to introduce student to the world of product management",
                            Name = "Introduction to Product Management"
                        },
                        new
                        {
                            Id = new Guid("1b30b805-ee65-4e04-b4bd-d0b44f279de1"),
                            Description = "This course is for students who want to learn how to grow a product",
                            Name = "Growth Product Management"
                        });
                });

            modelBuilder.Entity("Edutech.Api.Infrastructure.Data.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d1f4fca-d514-4931-98e7-e807d6601957"),
                            CourseId = new Guid("0e03d27a-f78a-4717-a029-f4c5bf653b97"),
                            Name = "Product Management Basic"
                        },
                        new
                        {
                            Id = new Guid("69dd4e16-4687-48f5-99a5-5ce423204c11"),
                            CourseId = new Guid("0e03d27a-f78a-4717-a029-f4c5bf653b97"),
                            Name = "Product Management Framework"
                        },
                        new
                        {
                            Id = new Guid("709ab670-b7c5-4702-b82b-57f31eaf093c"),
                            CourseId = new Guid("0e03d27a-f78a-4717-a029-f4c5bf653b97"),
                            Name = "Product Management Tools"
                        },
                        new
                        {
                            Id = new Guid("f9b4a3e0-5a85-4bfd-a970-cc78a94bef87"),
                            CourseId = new Guid("1b30b805-ee65-4e04-b4bd-d0b44f279de1"),
                            Name = "Introduction to Growth Product Management"
                        },
                        new
                        {
                            Id = new Guid("e468724c-cb14-4420-b31a-ada65e45356d"),
                            CourseId = new Guid("1b30b805-ee65-4e04-b4bd-d0b44f279de1"),
                            Name = "Growth Product Management Framework"
                        });
                });

            modelBuilder.Entity("Edutech.Api.Infrastructure.Data.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b06fed02-c430-4e2b-81e0-7a316876bd40"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("fe1334b4-bfa3-4237-bdcc-252da5810409"),
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = new Guid("d2828b61-9d05-4dc6-b268-575cad5ffe26"),
                            Name = "Instructor",
                            NormalizedName = "INSTRUCTOR"
                        });
                });

            modelBuilder.Entity("Edutech.Api.Infrastructure.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("65a2df6c-214f-4e32-b629-54d1ce258cea"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14cf8aa7-a1b4-493f-8346-7289efbfcd2d",
                            Email = "admin@edutech.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EDUTECH.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBu4l9hpaxQbnXBP0mZHhQj2oXuMB6yQuZTun4eqs1KWSWOZvKLvZGMG5E1rZ8VPVQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("ccb2ad0e-5f9a-417a-bf38-df935e1a1528"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8cda219d-73a2-48d6-bc7b-e1ad27425ede",
                            Email = "student1@edutech.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT1@EDUTECH.COM",
                            NormalizedUserName = "STUDENT1",
                            PasswordHash = "AQAAAAIAAYagAAAAEJGmfBaizjzNWMDJ8LukCR3XLHYjUzT8kpDAPol4WZ8x9IM0rkWyNav1IMFiDcm7rg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "student1"
                        },
                        new
                        {
                            Id = new Guid("03b94467-cca0-463c-9a3d-64188fc3fe35"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42716b7a-f754-4f7a-a49a-9cf00de40acd",
                            Email = "student2@edutech.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT2@EDUTECH.COM",
                            NormalizedUserName = "STUDENT2",
                            PasswordHash = "AQAAAAIAAYagAAAAEFNl837noIug9wfG+g6zEhnXuWYi2LIq/jDSFt+Owz9+f7ZWBYcMAWUPYMmG671C7g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "student2"
                        },
                        new
                        {
                            Id = new Guid("9fec92ff-0485-4dea-a47f-e5b33d3dca98"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "67e22f47-eb9c-403a-b5be-882daab11a31",
                            Email = "instructor1@edutech.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR1@EDUTECH.COM",
                            NormalizedUserName = "INSTRUCTOR1",
                            PasswordHash = "AQAAAAIAAYagAAAAEOE2YI3a4lsOZrb3TTC2ZLOa4eMDryK/kXOJOHsE979TN+FrXPnV22lfX0wtljIAOQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "instructor1"
                        },
                        new
                        {
                            Id = new Guid("d5e632ac-fad1-4725-8cbf-50409fe241ba"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aff21424-1ba8-4841-abd4-e2868835f56a",
                            Email = "instructor2@edutech.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR2@EDUTECH.COM",
                            NormalizedUserName = "INSTRUCTOR2",
                            PasswordHash = "AQAAAAIAAYagAAAAEErR6lx3WrA5lX8N9sVj2X/rtvmi43fDhcnEtjtUkZv29ASEzoO1YlUr2/ZBzH4nqQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "instructor2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("65a2df6c-214f-4e32-b629-54d1ce258cea"),
                            RoleId = new Guid("b06fed02-c430-4e2b-81e0-7a316876bd40")
                        },
                        new
                        {
                            UserId = new Guid("ccb2ad0e-5f9a-417a-bf38-df935e1a1528"),
                            RoleId = new Guid("fe1334b4-bfa3-4237-bdcc-252da5810409")
                        },
                        new
                        {
                            UserId = new Guid("03b94467-cca0-463c-9a3d-64188fc3fe35"),
                            RoleId = new Guid("fe1334b4-bfa3-4237-bdcc-252da5810409")
                        },
                        new
                        {
                            UserId = new Guid("9fec92ff-0485-4dea-a47f-e5b33d3dca98"),
                            RoleId = new Guid("d2828b61-9d05-4dc6-b268-575cad5ffe26")
                        },
                        new
                        {
                            UserId = new Guid("d5e632ac-fad1-4725-8cbf-50409fe241ba"),
                            RoleId = new Guid("d2828b61-9d05-4dc6-b268-575cad5ffe26")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("UserCourses", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CourseId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCourses");

                    b.HasData(
                        new
                        {
                            CourseId = new Guid("0e03d27a-f78a-4717-a029-f4c5bf653b97"),
                            UserId = new Guid("9fec92ff-0485-4dea-a47f-e5b33d3dca98")
                        },
                        new
                        {
                            CourseId = new Guid("0e03d27a-f78a-4717-a029-f4c5bf653b97"),
                            UserId = new Guid("ccb2ad0e-5f9a-417a-bf38-df935e1a1528")
                        },
                        new
                        {
                            CourseId = new Guid("0e03d27a-f78a-4717-a029-f4c5bf653b97"),
                            UserId = new Guid("03b94467-cca0-463c-9a3d-64188fc3fe35")
                        },
                        new
                        {
                            CourseId = new Guid("1b30b805-ee65-4e04-b4bd-d0b44f279de1"),
                            UserId = new Guid("d5e632ac-fad1-4725-8cbf-50409fe241ba")
                        },
                        new
                        {
                            CourseId = new Guid("1b30b805-ee65-4e04-b4bd-d0b44f279de1"),
                            UserId = new Guid("ccb2ad0e-5f9a-417a-bf38-df935e1a1528")
                        });
                });

            modelBuilder.Entity("Edutech.Api.Infrastructure.Data.Content", b =>
                {
                    b.HasOne("Edutech.Api.Infrastructure.Data.ContentType", "ContentType")
                        .WithMany("Contents")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Edutech.Api.Infrastructure.Data.Module", "Module")
                        .WithMany("Contents")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentType");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Edutech.Api.Infrastructure.Data.Module", b =>
                {
                    b.HasOne("Edutech.Api.Infrastructure.Data.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Edutech.Api.Infrastructure.Data.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Edutech.Api.Infrastructure.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Edutech.Api.Infrastructure.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Edutech.Api.Infrastructure.Data.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Edutech.Api.Infrastructure.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Edutech.Api.Infrastructure.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserCourses", b =>
                {
                    b.HasOne("Edutech.Api.Infrastructure.Data.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Edutech.Api.Infrastructure.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Edutech.Api.Infrastructure.Data.ContentType", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("Edutech.Api.Infrastructure.Data.Course", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("Edutech.Api.Infrastructure.Data.Module", b =>
                {
                    b.Navigation("Contents");
                });
#pragma warning restore 612, 618
        }
    }
}
